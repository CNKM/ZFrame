<%-- 
Name:实体对象
Author: PeerLessSoul Code by:Code Smith
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" Description="Generates a very simple business object." ResponseEncoding="UTF-8" %>
<%@ Property Name="NameSpace" Type="String" Category="Text" Default="Sunfishlu." Description="The namespace to use for this class" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>

using ZFrameCore.Entity;
using System;
namespace <%= NameSpace %>
{
  
    /// <summary> 实体名称
    /// </summary>
    public class  <%=GetClassName(SourceTable)%> : TEntityBase
    {
          #region 数据库字段对应
          
          <% for (int i=0; i < SourceTable.Columns.Count; ++i) { %>
          private <%=GetCSharpVariableTypeByCreatStore(SourceTable.Columns[i])%> _<%=SourceTable.Columns[i].Name%>;
        
          <%=ColumnInfomation(SourceTable.Columns[i])%>
          public <%=GetCSharpVariableTypeByCreatStore(SourceTable.Columns[i])%> <%=SourceTable.Columns[i].Name%>{get{return _<%=SourceTable.Columns[i].Name%>;}set{ if(_<%=SourceTable.Columns[i].Name%>!=value){_<%=SourceTable.Columns[i].Name%>=value;if(SendNotifyProperty)this.SendPropertyChanged("<%=SourceTable.Columns[i].Name%>");}}}
          
          <%}%>
          
          #endregion
    }
}

<script runat="template">
public string GetEntityNameSpace(TableSchema table)
{
  return "Entity"+table.Name.Split('_')[1].ToUpper();
}

public String ColumnInfomation(ColumnSchema column)
          {
              if(column.IsPrimaryKeyMember){ 
                 String ReturnString=
                    @"/// <summary>"+column.Description+@"
          /// </summary>"+@"
          [PropertyType(EntityPropertyType.DBFieldKey)]";
                  return ReturnString;
              }
              else
              {
                    String ReturnString=
                    @"/// <summary>" +column.Description+@"
           /// </summary>";
                  return ReturnString;
              }
          }
          
public string GetCSharpVariableTypeByCreatStore(ColumnSchema column)
{
    if (column.Name.EndsWith("TypeCode")) return column.Name;
    
    switch (column.DataType)
    {
        case DbType.AnsiString: return "string";
        case DbType.AnsiStringFixedLength: return "string";
        case DbType.Binary: return "byte[]";
        case DbType.Boolean: return "bool?";
        case DbType.Byte: return "byte";
        case DbType.Currency: return "decimal";
        case DbType.Date: return "DateTime?";
        case DbType.DateTime: return "DateTime?";
        case DbType.Decimal: return "decimal";
        case DbType.Double: return "double";
        case DbType.Guid: return "Guid";
        case DbType.Int16: return "short";
        case DbType.Int32: return "int?";
        case DbType.Int64: return "long";
        case DbType.Object: return "object";
        case DbType.SByte: return "sbyte";
        case DbType.Single: return "float";
        case DbType.String: return "string";
        case DbType.StringFixedLength: return "string";
        case DbType.Time: return "TimeSpan";
        case DbType.UInt16: return "ushort";
        case DbType.UInt32: return "uint";
        case DbType.UInt64: return "ulong";
        case DbType.VarNumeric: return "decimal";
        default:
        {
            return "__UNKNOWN__" + column.NativeType;
        }
    }
}
/// <summary>
/// 根据输入表获取类名
/// </summary>
/// <param name="table"></param>
/// <returns></returns>
public string GetClassName(TableSchema table)
{
    return table.Name;
}

/// <summary>
/// 生成文件名称
/// </summary>
/// <returns></returns>
public override string GetFileName()
{
    return this.GetClassName(this.SourceTable) + ".cs";
}

</script>